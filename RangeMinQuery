#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
using namespace std;

int rmq(int A[],int vs,int ve,int qs,int qe,int si)
{
    if(qs<=vs && qe>=ve)
        return A[si];
    if(vs>qe || ve<qs)return INT_MAX;
    
    int m  =(vs+ve)/2;
    
    return  min(rmq(A,vs,m,qs,qe,2*si+1),rmq(A,m+1,ve,qs,qe,2*si+2));
}


int construct (int A[],vector <int> &vec,int vs,int ve,int si)
{
    if(ve==vs)
    {
        A[si]=vec[ve];
        return A[si];
    }
    int m  =(vs+ve)/2;
    
    A[si]= min(construct(A,vec,vs,m,2*si+1),construct(A,vec,m+1,ve,2*si+2));
    return A[si];
}


int main()
{
    vector < int  > vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);
    vec.push_back(4);
    vec.push_back(5);
    vec.push_back(6);
    vec.push_back(7);
    vec.push_back(8);
    
    
    int v   = (int)vec.size();
    
    
    int n   = (int) ceil(log2(v));
    n =  2*(int)pow(2,n)-1;
    int A[n];
    
   int mi= construct(A,vec,0,v-1,0);
 //   cout <<mi;
    int out =  rmq(A,0,v-1,3,5,0);
    
    cout <<out;
    return 1;
    
    
    
    


    
    
    
}


