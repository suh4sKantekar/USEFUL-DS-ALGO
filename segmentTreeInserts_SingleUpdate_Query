#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
using namespace std;

void update(int Arr[],int vs,int ve,int diff,int i,int si)
{
    if(i<vs || i>ve)
        return;
    
    Arr[si]+=diff;
    if(vs!=ve)
    {
        int m  = (vs+ve)/2;
        update(Arr,vs,m,diff,i,2*si+1);
         update(Arr,m+1,ve,diff,i,2*si+2);
    }
    
}


int getSum(int Arr[],int qs,int qe,int vs,int ve,int si )
{
    if(qs<=vs && qe>=ve)return Arr[si];
    
    if(ve<qs || vs>qe)return 0;
    
    int m = (vs+ve)/2;
    
    return getSum(Arr, qs,qe,vs,m,2*si+1)+ getSum(Arr, qs,qe,m+1,ve,2*si+2);
    
  
}


int construct(vector <int>& vec ,int Arr[],int vs,int ve,int si )
{
    
    if(vs==ve)
    {   //cout <<ss;
        Arr[si]=vec[ve];
        return Arr[si];
        
    }
    int m  =(vs+ve)/2;
    
    Arr[si]=construct(vec,Arr,vs,m,2*si+1)+construct(vec,Arr,m+1,ve,2*si+2);
    return Arr[si];
    
    
}


int main()
{
    vector < int  > vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3);
    vec.push_back(4);
    vec.push_back(5);
    vec.push_back(6);
    vec.push_back(7);
    vec.push_back(8);
    
    
    int v   = (int)vec.size();
    
    
    int n =  (int) ceil(log2(v));
    n=  (int)2* pow(2,n) - 1;
    
    int Arr[n];

    construct(vec,Arr,0,v-1,0);
    int qs = 0;
    int qe = 0;
    //diff = newval-oldval
    update(Arr,0,v-1,2,0,0);
    int q = getSum(Arr,qs,qe,0,v-1,0);
    cout <<q;
    
    //for(int i=0;i<n;i++)
       // cout <<Arr[i]<<" ";
    
    
    return 1;
    
    
    
    


    
    
    
}


